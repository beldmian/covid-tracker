{"version":3,"sources":["features/covid/covid.module.sass","features/covid/covidSlice.js","features/covid/Country.jsx","features/covid/CountryList.jsx","App.jsx","app/store.js","serviceWorker.js","index.js"],"names":["module","exports","covidSlice","createSlice","name","initialState","value","reducers","setCovidData","state","action","payload","actions","selectCovid","covid","Country","item","className","styles","country","NewConfirmed","NewRecovered","red","green","country_body","TotalConfirmed","TotalDeaths","NewDeaths","TotalRecovered","CountryList","covidData","useSelector","dispatch","useDispatch","useEffect","fetch","then","response","json","container","style","Date","toLocaleDateString","container_grid","undefined","Global","Countries","map","App","configureStore","reducer","covidReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"wJACAA,EAAOC,QAAU,CAAC,QAAU,uBAAuB,aAAe,4BAA4B,IAAM,mBAAmB,MAAQ,qBAAqB,UAAY,yBAAyB,eAAiB,gC,0FCC7LC,EAAaC,YAAY,CACpCC,KAAM,QACNC,aAAc,CACZC,MAAO,IAETC,SAAU,CACRC,aAAc,SAACC,EAAOC,GACpBD,EAAMH,MAAQI,EAAOC,YAKZH,EAAiBN,EAAWU,QAA5BJ,aAQFK,EAAc,SAAAJ,GAAK,OAAIA,EAAMK,MAAMR,OAEjCJ,IAAf,Q,uBCrBO,SAASa,EAAT,GAA4B,IAATC,EAAQ,EAARA,KACxB,OACE,6BACE,yBAAKC,UAAYC,IAAOC,SACtB,wBAAIF,UAAYD,EAAKI,aAAeJ,EAAKK,aAAeH,IAAOI,IAAMJ,IAAOK,OAASP,EAAKD,SAAW,SACrG,yBAAKE,UAAYC,IAAOM,cACtB,+CAAsBR,EAAKS,eAA3B,MAA+CT,EAAKI,aAApD,KACA,4CAAmBJ,EAAKU,YAAxB,MAAyCV,EAAKW,UAA9C,KACA,+CAAsBX,EAAKY,eAA3B,MAA+CZ,EAAKK,aAApD,QCJH,SAASQ,IACd,IAAMC,EAAYC,YAAYlB,GACxBmB,EAAWC,cAIjB,OAHAC,qBAAU,WACRF,GFK4B,SAAAA,GAC9BG,MAAM,sCACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAE,GAAI,OAAIN,EAASxB,EAAa8B,YEPnC,CAACN,IAEF,6BACE,yBAAKf,UAAYC,IAAOqB,WACtB,gDAAqB,0BAAMC,MAAO,CAAE,MAAS,WAAY,IAAIC,MAAOC,mBAAmB,WACvF,yBAAKzB,UAAYC,IAAOyB,qBACAC,IAArBd,EAAUe,OAAuB,GAAK,kBAAC9B,EAAD,CAASC,KAAMc,EAAUe,cACvCD,IAAxBd,EAAUgB,UAA0B,UAAYhB,EAAUgB,UAAUC,KAAI,SAAA/B,GAAI,OAAK,kBAACD,EAAD,CAASC,KAAMA,UCR5FgC,MARf,WACE,OACE,yBAAK/B,UAAU,OACb,kBAACY,EAAD,QCHSoB,cAAe,CAC5BC,QAAS,CACPpC,MAAOqC,KCOSC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAUC,MAAOA,GACf,kBAAC,EAAD,QAGJC,SAASC,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM7B,MAAK,SAAA8B,GACjCA,EAAaC,kB","file":"static/js/main.3ad63639.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"country\":\"covid_country__2p4wh\",\"country_body\":\"covid_country_body__30nsv\",\"red\":\"covid_red__AiAfZ\",\"green\":\"covid_green__mLwcT\",\"container\":\"covid_container__2bmIr\",\"container_grid\":\"covid_container_grid__3QAQG\"};","import { createSlice } from '@reduxjs/toolkit'\n\nexport const covidSlice = createSlice({\n  name: 'covid',\n  initialState: {\n    value: {}\n  },\n  reducers: {\n    setCovidData: (state, action) => {\n      state.value = action.payload\n    },\n  },\n})\n\nexport const { setCovidData } = covidSlice.actions;\n\nexport const fetchCovid = () => dispatch => {\n  fetch('https://api.covid19api.com/summary')\n    .then(response => response.json())\n    .then(json => dispatch(setCovidData(json)))\n}\n\nexport const selectCovid = state => state.covid.value;\n\nexport default covidSlice.reducer;\n","import React from 'react'\nimport styles from './covid.module.sass'\n\nexport function Country({ item }) {\n  return (\n    <div>\n      <div className={ styles.country }>\n        <h2 className={ item.NewConfirmed > item.NewRecovered ? styles.red : styles.green }>{item.Country || 'World'}</h2>\n        <div className={ styles.country_body}>\n          <li>TotalConfirmed: { item.TotalConfirmed } (+{item.NewConfirmed})</li>\n          <li>TotalDeaths: { item.TotalDeaths } (+{item.NewDeaths})</li>\n          <li>TotalRecovered: { item.TotalRecovered } (+{item.NewRecovered})</li>\n        </div>\n      </div>\n    </div>\n  )\n}\n","import React, {useEffect} from 'react'\nimport { fetchCovid, selectCovid } from './covidSlice'\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Country } from './Country'\nimport styles from './covid.module.sass'\n\n\nexport function CountryList() {\n  const covidData = useSelector(selectCovid)\n  const dispatch = useDispatch()\n  useEffect(() => {\n    dispatch(fetchCovid())\n  }, [dispatch])\n  return (\n    <div>\n      <div className={ styles.container }>\n        <h1>COVID-19 Tracker <span style={{ 'float': 'right' }}>{new Date().toLocaleDateString(\"ru-RU\")}</span></h1>\n        <div className={ styles.container_grid }>\n          {covidData.Global === undefined ? '' : <Country item={covidData.Global} />}\n          {covidData.Countries === undefined ? 'Loading' : covidData.Countries.map(item => (<Country item={item} />))}\n        </div>\n      </div>\n    </div>\n  )\n}\n","import React from 'react';\r\nimport { CountryList } from './features/covid/CountryList';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <CountryList />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport covidReducer from '../features/covid/covidSlice';\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    covid: covidReducer,\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.sass';\r\nimport App from './App.jsx';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}